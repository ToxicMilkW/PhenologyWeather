package com.iap.phenologyweather.config.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.iap.phenologyweather.data.model.Location;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "location_table".
*/
public class LocationDao extends AbstractDao<Location, Long> {

    public static final String TABLENAME = "location_table";

    /**
     * Properties of entity Location.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Level0 = new Property(1, String.class, "level0", false, "level1");
        public final static Property Level1 = new Property(2, String.class, "level1", false, "level2");
        public final static Property Level2 = new Property(3, String.class, "level2", false, "level3");
        public final static Property Level3 = new Property(4, String.class, "level3", false, "level4");
        public final static Property Lat = new Property(5, double.class, "lat", false, "lat");
        public final static Property Lon = new Property(6, double.class, "lon", false, "lon");
        public final static Property FormattedAddr = new Property(7, String.class, "formattedAddr", false, "formatted_addr");
        public final static Property Lable = new Property(8, String.class, "lable", false, "lable");
        public final static Property GmtOffset = new Property(9, long.class, "gmtOffset", false, "gmt_offset");
        public final static Property DayLightOffset = new Property(10, long.class, "dayLightOffset", false, "daylight_offset");
    }


    public LocationDao(DaoConfig config) {
        super(config);
    }
    
    public LocationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"location_table\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"level1\" TEXT NOT NULL ," + // 1: level0
                "\"level2\" TEXT NOT NULL ," + // 2: level1
                "\"level3\" TEXT NOT NULL ," + // 3: level2
                "\"level4\" TEXT," + // 4: level3
                "\"lat\" REAL NOT NULL ," + // 5: lat
                "\"lon\" REAL NOT NULL ," + // 6: lon
                "\"formatted_addr\" TEXT," + // 7: formattedAddr
                "\"lable\" TEXT," + // 8: lable
                "\"gmt_offset\" INTEGER NOT NULL ," + // 9: gmtOffset
                "\"daylight_offset\" INTEGER NOT NULL );"); // 10: dayLightOffset
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"location_table\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Location entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getLevel0());
        stmt.bindString(3, entity.getLevel1());
        stmt.bindString(4, entity.getLevel2());
 
        String level3 = entity.getLevel3();
        if (level3 != null) {
            stmt.bindString(5, level3);
        }
        stmt.bindDouble(6, entity.getLat());
        stmt.bindDouble(7, entity.getLon());
 
        String formattedAddr = entity.getFormattedAddr();
        if (formattedAddr != null) {
            stmt.bindString(8, formattedAddr);
        }
 
        String lable = entity.getLable();
        if (lable != null) {
            stmt.bindString(9, lable);
        }
        stmt.bindLong(10, entity.getGmtOffset());
        stmt.bindLong(11, entity.getDayLightOffset());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Location entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getLevel0());
        stmt.bindString(3, entity.getLevel1());
        stmt.bindString(4, entity.getLevel2());
 
        String level3 = entity.getLevel3();
        if (level3 != null) {
            stmt.bindString(5, level3);
        }
        stmt.bindDouble(6, entity.getLat());
        stmt.bindDouble(7, entity.getLon());
 
        String formattedAddr = entity.getFormattedAddr();
        if (formattedAddr != null) {
            stmt.bindString(8, formattedAddr);
        }
 
        String lable = entity.getLable();
        if (lable != null) {
            stmt.bindString(9, lable);
        }
        stmt.bindLong(10, entity.getGmtOffset());
        stmt.bindLong(11, entity.getDayLightOffset());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Location readEntity(Cursor cursor, int offset) {
        Location entity = new Location( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // level0
            cursor.getString(offset + 2), // level1
            cursor.getString(offset + 3), // level2
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // level3
            cursor.getDouble(offset + 5), // lat
            cursor.getDouble(offset + 6), // lon
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // formattedAddr
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // lable
            cursor.getLong(offset + 9), // gmtOffset
            cursor.getLong(offset + 10) // dayLightOffset
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Location entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLevel0(cursor.getString(offset + 1));
        entity.setLevel1(cursor.getString(offset + 2));
        entity.setLevel2(cursor.getString(offset + 3));
        entity.setLevel3(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLat(cursor.getDouble(offset + 5));
        entity.setLon(cursor.getDouble(offset + 6));
        entity.setFormattedAddr(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLable(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setGmtOffset(cursor.getLong(offset + 9));
        entity.setDayLightOffset(cursor.getLong(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Location entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Location entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Location entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
