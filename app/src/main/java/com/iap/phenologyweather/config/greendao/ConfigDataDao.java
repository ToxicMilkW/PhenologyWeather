package com.iap.phenologyweather.config.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.iap.phenologyweather.data.model.ConfigData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "config_table".
*/
public class ConfigDataDao extends AbstractDao<ConfigData, Long> {

    public static final String TABLENAME = "config_table";

    /**
     * Properties of entity ConfigData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property IsClock24Formate = new Property(1, boolean.class, "isClock24Formate", false, "clock_formate");
        public final static Property DateFormate = new Property(2, int.class, "dateFormate", false, "data_formate");
        public final static Property TempUnit = new Property(3, int.class, "tempUnit", false, "temp_unit");
        public final static Property TempUnitName = new Property(4, String.class, "tempUnitName", false, "temp_unit_name");
        public final static Property DistanceUnit = new Property(5, int.class, "distanceUnit", false, "distance_unit");
        public final static Property DistanceUnitName = new Property(6, String.class, "distanceUnitName", false, "distance_unit_name");
        public final static Property SpeedUnit = new Property(7, int.class, "speedUnit", false, "speed_unit");
        public final static Property SpeedUnitName = new Property(8, String.class, "speedUnitName", false, "speed_unit_name");
        public final static Property PressureUnit = new Property(9, int.class, "pressureUnit", false, "pressure_unit");
        public final static Property PressureUnitName = new Property(10, String.class, "pressureUnitName", false, "pressure_unit_name");
        public final static Property IsUseWorldClock = new Property(11, boolean.class, "isUseWorldClock", false, "is_use_world_clock");
        public final static Property IsLocalTime = new Property(12, boolean.class, "isLocalTime", false, "is_locate_time");
    }


    public ConfigDataDao(DaoConfig config) {
        super(config);
    }
    
    public ConfigDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"config_table\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"clock_formate\" INTEGER NOT NULL ," + // 1: isClock24Formate
                "\"data_formate\" INTEGER NOT NULL ," + // 2: dateFormate
                "\"temp_unit\" INTEGER NOT NULL ," + // 3: tempUnit
                "\"temp_unit_name\" TEXT NOT NULL ," + // 4: tempUnitName
                "\"distance_unit\" INTEGER NOT NULL ," + // 5: distanceUnit
                "\"distance_unit_name\" TEXT NOT NULL ," + // 6: distanceUnitName
                "\"speed_unit\" INTEGER NOT NULL ," + // 7: speedUnit
                "\"speed_unit_name\" TEXT NOT NULL ," + // 8: speedUnitName
                "\"pressure_unit\" INTEGER NOT NULL ," + // 9: pressureUnit
                "\"pressure_unit_name\" TEXT NOT NULL ," + // 10: pressureUnitName
                "\"is_use_world_clock\" INTEGER NOT NULL ," + // 11: isUseWorldClock
                "\"is_locate_time\" INTEGER NOT NULL );"); // 12: isLocalTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"config_table\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ConfigData entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getIsClock24Formate() ? 1L: 0L);
        stmt.bindLong(3, entity.getDateFormate());
        stmt.bindLong(4, entity.getTempUnit());
        stmt.bindString(5, entity.getTempUnitName());
        stmt.bindLong(6, entity.getDistanceUnit());
        stmt.bindString(7, entity.getDistanceUnitName());
        stmt.bindLong(8, entity.getSpeedUnit());
        stmt.bindString(9, entity.getSpeedUnitName());
        stmt.bindLong(10, entity.getPressureUnit());
        stmt.bindString(11, entity.getPressureUnitName());
        stmt.bindLong(12, entity.getIsUseWorldClock() ? 1L: 0L);
        stmt.bindLong(13, entity.getIsLocalTime() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ConfigData entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getIsClock24Formate() ? 1L: 0L);
        stmt.bindLong(3, entity.getDateFormate());
        stmt.bindLong(4, entity.getTempUnit());
        stmt.bindString(5, entity.getTempUnitName());
        stmt.bindLong(6, entity.getDistanceUnit());
        stmt.bindString(7, entity.getDistanceUnitName());
        stmt.bindLong(8, entity.getSpeedUnit());
        stmt.bindString(9, entity.getSpeedUnitName());
        stmt.bindLong(10, entity.getPressureUnit());
        stmt.bindString(11, entity.getPressureUnitName());
        stmt.bindLong(12, entity.getIsUseWorldClock() ? 1L: 0L);
        stmt.bindLong(13, entity.getIsLocalTime() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public ConfigData readEntity(Cursor cursor, int offset) {
        ConfigData entity = new ConfigData( //
            cursor.getLong(offset + 0), // id
            cursor.getShort(offset + 1) != 0, // isClock24Formate
            cursor.getInt(offset + 2), // dateFormate
            cursor.getInt(offset + 3), // tempUnit
            cursor.getString(offset + 4), // tempUnitName
            cursor.getInt(offset + 5), // distanceUnit
            cursor.getString(offset + 6), // distanceUnitName
            cursor.getInt(offset + 7), // speedUnit
            cursor.getString(offset + 8), // speedUnitName
            cursor.getInt(offset + 9), // pressureUnit
            cursor.getString(offset + 10), // pressureUnitName
            cursor.getShort(offset + 11) != 0, // isUseWorldClock
            cursor.getShort(offset + 12) != 0 // isLocalTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ConfigData entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setIsClock24Formate(cursor.getShort(offset + 1) != 0);
        entity.setDateFormate(cursor.getInt(offset + 2));
        entity.setTempUnit(cursor.getInt(offset + 3));
        entity.setTempUnitName(cursor.getString(offset + 4));
        entity.setDistanceUnit(cursor.getInt(offset + 5));
        entity.setDistanceUnitName(cursor.getString(offset + 6));
        entity.setSpeedUnit(cursor.getInt(offset + 7));
        entity.setSpeedUnitName(cursor.getString(offset + 8));
        entity.setPressureUnit(cursor.getInt(offset + 9));
        entity.setPressureUnitName(cursor.getString(offset + 10));
        entity.setIsUseWorldClock(cursor.getShort(offset + 11) != 0);
        entity.setIsLocalTime(cursor.getShort(offset + 12) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ConfigData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ConfigData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ConfigData entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
